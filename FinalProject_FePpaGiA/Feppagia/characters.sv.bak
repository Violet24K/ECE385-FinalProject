module  ball  (input           Clk,                // 50 MHz clock
                                    Reset,              // Active-high reset signal
                                    frame_clk,          // The clock indicating a new frame (~60Hz)
                    input [9:0]     DrawX, DrawY,       // Current pixel coordinates
                    input [7:0]     keycode,
                    output logic    is_ball        // Whether current pixel belongs to ball or background
                    );

    parameter [9:0] ball_X_Start = 10'd10;      // Start position on the X axis
    parameter [9:0] ball_Y_Start = 10'd17;      // Start position on the Y axis

    parameter [9:0] ball_X_Center = 10'd320;   // Center position on the X axis
    parameter [9:0] ball_Y_Center = 10'd240;   // Center position on the Y axis

    parameter [9:0] ball_X_Min = 10'd0;        // Leftmost point on the X axis
    parameter [9:0] ball_X_Max = 10'd639;      // Rightmost point on the X axis
    parameter [9:0] ball_Y_Min = 10'd0;        // Topmost point on the Y axis
    parameter [9:0] ball_Y_Max = 10'd479;      // Bottommost point on the Y axis

    parameter [9:0] ball_X_Step = 10'd1;       // Step size on the X axis
    parameter [9:0] ball_Y_Step = 10'd5;       // Step size on the Y axis

    parameter [9:0] ball_Height = 10'd56;      // ball height
    parameter [9:0] ball_Width = 10'd42;       // ball width

    parameter [9:0] gravity = 10'd1;

    logic [9:0] ball_X_Pos, ball_X_Motion, ball_Y_Pos, ball_Y_Motion;
    logic [9:0] ball_X_Pos_in, ball_X_Motion_in, ball_Y_Pos_in, ball_Y_Motion_in;

    // half height and half width are used to determine whether out of bound
    int half_height, half_width;
    assign half_height = ball_Height / 2;
    assign half_width = ball_Width / 2;

    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end

    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            ball_X_Pos <= ball_X_Start;
            ball_Y_Pos <= ball_Y_Start;
            ball_X_Motion <= 10'd0;
            ball_Y_Motion <= ball_Y_Step;
        end
        else
        begin
            ball_X_Pos <= ball_X_Pos_in;
            ball_Y_Pos <= ball_Y_Pos_in;
            ball_X_Motion <= ball_X_Motion_in;
            ball_Y_Motion <= ball_Y_Motion_in;
        end
    end

    // W-A-S-D
    always_comb
    begin
        // By default, keep motion and position unchanged
        ball_X_Pos_in = ball_X_Pos;
        ball_Y_Pos_in = ball_Y_Pos;
        ball_X_Motion_in = ball_X_Motion;
        ball_Y_Motion_in = ball_Y_Motion;

        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
            begin
                case (keycode)
                    // A: left
                    8'h04 :
                        begin
                            ball_X_Motion_in = (~(ball_X_Step) + 1'b1);
                            ball_Y_Motion_in = 10'h000;
                        end

                    // D: right
                    8'h07 :
                        begin
                            ball_X_Motion_in = ball_X_Step;
                            ball_Y_Motion_in = 10'h000;
                        end

					// space: jump
                    4'd44 : 
                        begin    
                            ball_Y_Motion_in = (~(ball_Y_Step) + 1'b1);
                        end

                    default:
                        begin
                            ball_Y_Motion_in = ball_Y_Motion + gravity;
                        end
                endcase

                if( ball_Y_Pos + half_height >= ball_Y_Max )  // ball is at the bottom edge, STOP!
                    ball_Y_Motion_in = 0;  
                else if ( ball_Y_Pos <= ball_Y_Min + half_height )  // ball is at the top edge, STOP!
                    ball_Y_Motion_in = 0;

                if( ball_X_Pos + half_width >= ball_X_Max )  // ball is at the right edge, STOP!
                    ball_X_Motion_in = 0;  
                else if ( ball_X_Pos <= ball_X_Min + half_width )  // ball is at the left edge, STOP!
                    ball_X_Motion_in = 0;

                // Update the ball's motion (speed)
                // ball_X_Motion_in = ball_X_Motion;
                // ball_Y_Motion_in = ball_Y_Motion + gravity;

                // Update the ball's position with its motion
                ball_X_Pos_in = ball_X_Pos + ball_X_Motion;
                ball_Y_Pos_in = ball_Y_Pos + ball_Y_Motion;
            end
    end

    // Compute whether the pixel corresponds to ball or background
    int DistX, DistY;
    assign DistX = DrawX > ball_X_Pos ? DrawX - ball_X_Pos : ball_X_Pos - DrawX;
    assign DistY = DrawY > ball_Y_Pos ? DrawY - ball_Y_Pos : ball_Y_Pos - DrawY;

    always_comb begin
        if ( DistX <= half_width && DistY <= half_height )
            is_ball = 1'b1;
        else
            is_ball = 1'b0;
    end

endmodule
